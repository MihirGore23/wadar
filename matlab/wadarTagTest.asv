function wadarTagTest(displayAllFrames, localDataPath, tagName, trialName, captureCount)
% wadarTagTest(localDataPath, tagName, trialName, captureCount)
%
% Function captures radar frames to test tag SNR and display capture
% fourier transform
%
% Inputs:
%       displayAllFrames: If true, displays each frame for 10 seconds
%       localDataPath: Location to store capture on local machine
%       tagName: Name of tag for file naming purposes
%       trialName: Trial name for file naming purposes
%       captureCount: Number of captures desired
%
% Outputs:
%       None

close all;

% Capture parameters
frameRate = 200;   
frameCount = 200;
radarType = 'Chipotle';
fullDataPath = sprintf("ericdvet@192.168.7.1:%s",localDataPath);

% File name generation
if isnumeric(trialName)
    trialName = num2str(trialName);
end

tagName = erase(tagName, " ");
trialName = erase(trialName, " ");

[year, month, date] = ymd(datetime("now"));
captureName = strcat(num2str(year), '-', num2str(month), '-', num2str(date), '_', tagName, '_T', trialName, '_C');

% Check for existing files with the same name to prevent overwrite
existingFiles = dir(localDataPath);

for i = 1:length(existingFiles)
    for j = 1:1:10
        if strcmp(existingFiles(i).name, strcat(captureName, num2str(j), '.frames'))
            error("Files under this trial index already exist. Iterate the trial index.")
            return
        end
    end
end

%% Commit Radar Capture

% Send Frame Logger command with appropriate parameters
frameLoggerOptions = sprintf('-s ../data/captureSettings -l ../data/%s -n %d -r %d -f %d -t %s -c %s', ...
    captureName, frameCount, captureCount, frameRate, radarType, fullDataPath);
frameLoggerCommand = sprintf('ssh root@192.168.7.2 "screen -dmS radar -m bash -c && cd FlatEarth/Demos/Common/FrameLogger && nice -n -20 ./frameLogger %s " &', ...
    frameLoggerOptions);
[status,~] = system(frameLoggerCommand);
  
fprintf("Please wait. The radar is collecting data.\n")
pause(frameCount/frameRate*captureCount);
fprintf("Waiting for data to be transferred...\n")
pause(10 + 2*captureCount)

% Verify that the capture is saved
checkFile = dir(fullfile(localDataPath, strcat(captureName, '1.frames')));
checkmd5File = dir(fullfile(localDataPath, strcat(captureName, '1.md5')));
if (length(checkFile) ~= 1) || (length(checkmd5File) ~= 1)
    error('There is a data transfer issue. Please verify your capture settings and scp directory.')
end
fileName = checkFile(1).name;
md5Name = checkmd5File(1).name;

% Verify that the md5 file checks out
md5command = sprintf('md5 %s', fullfile(localDataPath, fileName));
[status, cmdout] = system(md5command);
localchecksum = char(strsplit(cmdout));
localchecksum = lower(strtrim(localchecksum(4,:)));
localchecksum = deblank(localchecksum);

md5checksum = fileread(fullfile(localDataPath, md5Name));
md5checksum = char(strsplit(md5checksum));
md5checksum = lower(md5checksum(1,:));
md5checksum = deblank(localchecksum);

if (~strcmp(localchecksum, md5checksum))
    fprintf('Failure on framelogger check.\n', runCount);
    fprintf('Local checksum is %s.\n', localchecksum);
    fprintf('BBB checksum is %s.\n', md5checksum);
    error('Uh oh. There has been an error in the file transfer. The md5 hashes do not match.\n')
else
    fprintf('Framelogger captured frames succesfully!\n\n')
end

%% Process Capture Frames
SNRdB = zeros(1, captureCount);
peakMagnitudes = zeros(1, captureCount);
peakBin = zeros(1, captureCount);
failedCaptures = [];

for i = 1:1:captureCount
    [procResult, captureFT, tagFT, peakBin(i), SNRdB(i)] = procRadarFrames(localDataPath, strcat(captureName, num2str(i), '.frames'));
    
    if (procResult == false)
        failedCaptures = [failedCaptures i];
        fprintf("Capture %d faced a processing issue.\n", i)
        continue
    end

    peakMagnitudes(i) = tagFT(peakBin(i));
end

% Remove failed captures
for i = failedCaptures
    SNRdB(i) = [];
    peakMagnitudes(i) = [];
    peakBin(i) = [];
end

% for i = 1:1:captureCount
%     try
%         [rawFrames, pgen, fs_hz, chipSet, ~] = salsaLoad(fullfile(localDataPath, strcat(captureName, num2str(i), '.frames')));
%     catch
%         failedCaptures = [failedCaptures i];
%         continue
%     end
% 
%     % Baseband Conversion
%     frameCount = size(rawFrames, 2);
%     framesBB = zeros(size(rawFrames));
%     for j = 1:frameCount
%         framesBB(:,j) = NoveldaDDC(rawFrames(:,j), chipSet, pgen, fs_hz);
%     end
% 
%     % Find Tag FT
%     freqTag = tagHz / frameRate * frameCount;
%     captureFT = fft(framesBB, frameCount , 2); 
%     tagFT = abs(captureFT(:, freqTag));
%     for j = (freqTag-2:1:freqTag+2)
%         temp = abs(captureFT(:, j));
%         if max(temp) > max(tagFT)
%             tagFT = temp;
%         end
%     end
%     tagFT = smoothdata(tagFT, 'movmean', 10);
% 
%     % Find the bin corresponding to the largest peak 
%     [peakMagnitude, peaks] = findpeaks(tagFT, 'MinPeakHeight', max(tagFT) * 0.9);
%     peakBin(i) = peaks(1);
%     peakMagnitudes(i) = peakMagnitude(1);
% 
%     SNR(i) = calculateSNR(captureFT, freqTag, peakBin(i));
%     SNRdB(i) = 10 * log10(SNR(i));
% end

fprintf("\n%s Testing Results (Trial %s)\n\n", tagName, trialName)

fprintf("SNR Results:\n")
fprintf("Median: %fdB\nMean: %fdB\n\n", median(SNRdB), mean(SNRdB))


fprintf("Peak Magnitude Results:\n")
fprintf("Median: %f\nMean: %f\n\n", median(peakMagnitudes), mean(peakMagnitudes))

fprintf("Maximum difference between peak bins: %d\n\n", max(diff(sort(peakBin))))

figure(1)
plot(tagFT)
xline(peakBin(captureCount))
xlabel('Range Bins')
ylabel('Magnitude')
title(strcat("Capture ", num2str(captureCount), " - 80 Hz Isolated"));

figure(2)
hold on
for j = 2:1:frameCount
    plot(abs(captureFT(:, j)))
end
xlabel('Range Bins')
ylabel('Magnitude')
title(strcat("FT of all peak bins - Capture ", num2str(captureCount)));

end